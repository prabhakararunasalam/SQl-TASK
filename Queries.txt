//customer table

CREATE TABLE customers (
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
email VARCHAR(100) UNIQUE,
address VARCHAR(255) NOT NULL
);

DESCRIBE customers;

//ORDERS TABLE

CREATE TABLE orders(
id INT AUTO_INCREMENT PRIMARY KEY,
customer_id INT,
order_date DATE,
total_amount DECIMAL(10,2),
FOREIGN KEY(customer_id) REFERENCES customers(id)
);

DESCRIBE orders;

//PRODUCTS TABLE

CREATE TABLE products (
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100),
price DECIMAL(10,2),
description TEXT
);

DESCRIBE products;

(1).Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.
 

CREATE TABLE order_items (
id INT AUTO_INCREMENT PRIMARY KEY,
order_id INT,
product_id INT,
quantity INT,
FOREIGN KEY(order_id) REFERENCES orders(id),
FOREIGN KEY(product_id) REFERENCES products(id)
);

DESCRIBE order_items;

//VALUES UPDATING PART

INSERT INTO customers (name, email, address) VALUES
  ('John', 'john@example.com', 'chennai'),
  ('Joe', 'joe@example.com', 'tenkasi'),
  ('nike', 'nike@example.com', 'madurai');

INSERT INTO orders (customer_id, order_date, total_amount) VALUES
  (1, CURDATE() - INTERVAL 15 DAY, 150),
  (2, CURDATE() - INTERVAL 20 DAY, 200),
  (1, CURDATE(), 100),
  (3, CURDATE() - INTERVAL 5 DAY, 50);
  
  INSERT INTO products (name, price, description) VALUES
  ('Product A', 50.00, 'A great product'),
  ('Product B', 30.00, 'Another awesome product'),
  ('Product C', 100.00, 'The best product ever!');
  
  INSERT INTO order_items (order_id, product_id, quantity)
  VALUES
  (1 , 1 ,3),
  (2 , 3, 2),
  (1, 1, 2),
  (3 , 1, 1);
  
  SELECT * FROM customers;
  SELECT * FROM products;
  SELECT * FROM orders;
  SELECT * FROM order_items;


// QUERIES SECTION


--2. Retrieve all customers who have placed an order in the last 30 days.

  
  SELECT DISTINCT customers.name , customers.email
  FROM customers
  JOIN orders ON customers.id = orders.customer_id
  WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;


--3.Get the total amount of all orders placed by each customer.

  
  SELECT customers.name , SUM(orders.total_amount) AS total_spent
  FROM customers
  JOIN orders ON customers.id = orders.customer_id
  GROUP BY customers.name;


--4.Update the price of Product C to 45.00.

  
  UPDATE products SET price =45.00 WHERE products.name = 'product C';  
  SELECT * FROM products;


--5.Add a new column discount to the products table.

  ALTER TABLE products ADD COLUMN discount DECIMAL(5,2) DEFAULT 0.00;
  SELECT *FROM products;


--6.Retrieve the top 3 products with the highest price.

  
  SELECT name, price FROM products ORDER BY price DESC LIMIT 3;


--7.Get the names of customers who have ordered Product A.
  
  SELECT DISTINCT customers.name, customers.email
  FROM customers 
  JOIN orders ON customers.id = orders.customer_id
  join order_items ON orders.id = order_items.order_id
  JOIN products ON order_items.product_id = products.id
  WHERE products.name = 'product A';


--8.Join the orders and customers tables to retrieve the customer's name and order date for each order. 

  
  SELECT customers.name, orders.order_date, orders.total_amount
  FROM customers
  JOIN orders ON customers.id = orders.customer_id;


--9.Retrieve the orders with a total amount greater than 150.00.
  
  SELECT * FROM orders WHERE orders.total_amount >150;


--10.Retrieve the average total of all orders.

  
  SELECT AVG(total_amount) FROM orders;